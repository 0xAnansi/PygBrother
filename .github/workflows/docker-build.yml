name: "CI/CD: Test and Build Docker Image"

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
      REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
      REDDIT_REFRESH_TOKEN: ${{ secrets.REDDIT_REFRESH_TOKEN }}
      REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
      SUBREDDIT: ${{ secrets.SUBREDDIT }}
    runs-on: ubuntu-latest
    # services:
    #   postgres:
    #     image: postgres:17.5
    #     env:
    #       POSTGRES_DB: testdb
    #       POSTGRES_USER: testuser
    #       POSTGRES_PASSWORD: testpass
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Create env file
        run: |
          echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> "$GITHUB_ENV"
          echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> "$GITHUB_ENV"
          echo "REDDIT_REFRESH_TOKEN=${{ secrets.REDDIT_REFRESH_TOKEN }}" >> "$GITHUB_ENV"
          echo "REDDIT_USER_AGENT=${{ secrets.REDDIT_USER_AGENT }}" >> "$GITHUB_ENV"
          echo "SUBREDDIT=${{ secrets.SUBREDDIT }}" >> "$GITHUB_ENV"
      - name: Check env
        run: |
          echo "The following env vars are set:"
          echo "REDDIT_USER_AGENT=${{ secrets.REDDIT_USER_AGENT }}"
          echo "SUBREDDIT=${{ secrets.SUBREDDIT }}"
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests with pytest and JUnit XML output
        run: |
          env PYTHONPATH=$PWD pytest --junitxml=pytest-report.xml --cov --cov-branch --cov-report=xml tests/
      - name: Upload pytest results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: pytest-report.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: 0xAnansi/PygBrother
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: PyCharm Python Security Scanner
        uses: tonybaloney/pycharm-security@1.25.1

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build Docker image
      run: |
        docker build -t pygbrother:latest .
    - name: Save Docker image as artifact (optional)
      uses: actions/upload-artifact@v4
      with:
        name: pygbrother-docker-image
        path: /tmp/pygbrother.tar
      if: always()
      continue-on-error: true
      # Save the image to a tarball for download (optional)
    - name: Save Docker image to tarball
      run: |
        docker save pygbrother:latest -o /tmp/pygbrother.tar
